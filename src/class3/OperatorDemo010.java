package class3;

/*
 * <<:左移   左边最高位丢弃，右边补齐0
 * >>:右移  最高位是0，左边补齐0；最高位是1，左边补齐1
 * >>>;无符号右移  无论最高位是0还是1，左边补齐0
 * 
 * 面试题：
 *     请用最有效率的方式写出计算2乘以8的结果
 *     2<<3;//<< 把<<左边的数据*2的移动次幂
 */

public class OperatorDemo010 {

	public static void main(String[] args) {
		//<< 把<<左边的数据*2的移动次幂
		System.out.println( 3<<2 );//3*2^2 = 3*4 =12
		
		//>> 把>>右边的数据/2的移动次幂
		System.out.println( 24>>2 ); //24/2^2 =24/4 =6
	     
		//>>> 无符号右移  无论最高位是0还是1，左边补齐0
		System.out.println( 24>>>2 ); 
	
		//>> 把>>左边的数据/2的移动次幂
		System.out.println( -24>>2 ); //-6
			     
		//>>> 无符号右移  无论最高位是0还是1，左边补齐0
		System.out.println( -24>>>2 ); 
	}

}
/* <<的移动：左边最高位丢弃，右边补齐0
 * 计算出3的二进制：11
 *      00000000 00000000 00000000 00000011
 *  (00)00000 00000000 00000000 000001100
 *  
 *  >>的移动：最高位是0，左边补齐0；最高位是1，左边补齐1
 *  计算出-24的二进制：11000
 *      原码：10000000 00000000 00000000 00011000
 *      补码：11111111 11111111 11111111 11100111
 *      补码：11111111 11111111 11111111 11101000
 *      11111111 11111111 11111111 11101000   
 *      1111111111 11111111 11111111 111010(00) 补码
 *      
 *      补码：1111111111 11111111 11111111 111010
 *      反码：1111111111 11111111 11111111 111001
 *      原码：1000000000 00000000 00000000 000110
 *      结果：-6
 *    
 *    >>>的移动：无符号右移  无论最高位是0还是1，左边补齐0
 *  计算出-24的二进制：11000
 *      原码：10000000 00000000 00000000 00011000
 *      反码：11111111 11111111 11111111 11100111
 *      补码：11111111 11111111 11111111 11101000
 *      11111111 11111111 11111111 11101000   
 *      0011111111 11111111 11111111 111010(00) 补码
 *      
 *      正数=补码=反码=原码
 *       结果：1073741818
 *     
 *     
 */
